name: Deploy API to AWS

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string

jobs:  
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: api-lambda

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Upload api spec to S3
        run: |
          aws s3 cp ./APILambda/specs.json s3://${{ secrets.S3_API_SPECS_BUCKET_NAME }}/specs.json
      
      - name: Update AWS Lambda env variables
        run: |
          if [[ "${{ inputs.stage }}" == "prod" ]]; then
            DB_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DB_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          else
            DB_USERNAME=${{ secrets.DEV_DATABASE_USERNAME }}
            DB_PASSWORD=${{ secrets.DEV_DATABASE_PASSWORD }}
          fi

          aws lambda update-function-configuration \
            --function-name lambdaSQLRoute \
            --environment "Variables={\
              GITHUB_SHA=${{ github.sha }},\
              ENVIRONMENT=${{ inputs.stage }},\
              DATABASE_HOST=${{ secrets.DATABASE_HOST }},\
              DATABASE_NAME=${{ inputs.stage }},\
              DATABASE_PORT=${{ secrets.DATABASE_PORT }},\
              CA_PEM=${{ secrets.CA_PEM }},\
              DATABASE_USERNAME=$DB_USERNAME,\
              DATABASE_PASSWORD=$DB_PASSWORD,\
              AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }},\
              ABLY_KEY=${{ secrets.ABLY_KEY }},\
              SLACK_APP_ID=${{ secrets.SLACK_APP_ID }},\
              COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}\
            }"

      # Ensure the given lambda stage has the same permissions as the $LATEST
      - name: Deploy to AWS Lambda
        run: |
          aws lambda update-function-code --function-name lambdaSQLRoute --zip-file fileb://dist.zip
          while true; do
              update_status=$(aws lambda get-function --function-name lambdaSQLRoute | jq -r '.Configuration.LastUpdateStatus')

              if [[ "$update_status" == "Successful" ]]; then
                  echo "Update completed successfully."
                  break
              elif [[ "$update_status" == "Failed" ]]; then
                  echo "Update failed."
                  exit 1
              else
                  echo "Update in progress. Waiting..."
                  sleep 10
              fi
          done
          if [[ "${{ inputs.stage }}" == "prod" ]] || [[ "${{ inputs.stage }}" == "staging" ]]; then
            VERSION_NUMBER=$(aws lambda publish-version --function-name lambdaSQLRoute --description '${{ inputs.stage }} commit: ${{ github.sha }}' | jq -r '.Version')
            sed -i 's/:stagingTest/:${{ inputs.stage }}/g' APILambda/specs.json
            sed -i 's/\"stagingTest\"/\"${{ inputs.stage }}\"/g' APILambda/specs.json
            aws lambda update-alias --function-name lambdaSQLRoute --name ${{ inputs.stage }} --function-version $VERSION_NUMBER
            echo "Updated lambda alias successfully"
          fi
          aws apigateway put-rest-api --rest-api-id 623qsegfb9 --fail-on-warnings --debug --mode overwrite --body fileb://APILambda/specs.json
          echo "Updated api specs successfully"
          aws apigateway create-deployment --rest-api-id 623qsegfb9 --stage-name ${{ inputs.stage }} --description '${{ inputs.stage }} commit: ${{ github.sha }}'
          echo "Created api deployment successfully"