name: Build and Deploy API to AWS Lambda

on:
  push:
    branches:
      - main
      - development 

jobs:
  staging_tests:
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    env:
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_USERNAME: ${{ secrets.DEV_DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DEV_DATABASE_PASSWORD }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ABLY_KEY: ${{ secrets.ABLY_KEY }}
      AWS_LAMBDA_FUNCTION_NAME: 'lambdaSQLRoute'
      COGNITO_CLIENT_APP_ID: ${{ secrets.COGNITO_CLIENT_APP_ID }}
      COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
      API_ENDPOINT: 'https://623qsegfb9.execute-api.us-west-2.amazonaws.com/staging'
      SLACK_APP_ID: ${{ secrets.SLACK_APP_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install backend utils dependencies
        run: |
          cd TiFBackendUtils
          npm ci
      
      - name: Build backend utils js
        run: |
          cd TiFBackendUtils
          npm run build
      
      - name: Remove backend utils dev dependencies
        run: |
          cd TiFBackendUtils
          npm ci --omit=dev
      
      - name: Package backend utils
        run: |
          cd TiFBackendUtils
          shopt -s extglob
          cp -R !(test|.github|dist|*.ts) dist/
          cd dist
          npm pack

      - name: Install dependencies
        run: |
          cd GeocodingLambda
          npm ci
          cd ../APILambda
          npm ci
          npm install ../TiFBackendUtils/dist/TiFBackendUtils-1.0.0.tgz

      - name: Build the project
        run: |
          cd APILambda
          rm -f index.ts
          mv ./stagingIndex.ts ./index.ts
          npm run build
      
      - name: Remove dev dependencies
        run: |
          cd APILambda
          npm ci --omit=dev

      - name: Zip the project
        run: |
          cd APILambda
          shopt -s extglob
          cp -R !(test|.github|dist|*.ts) dist/
          cd dist
          zip -r ../dist.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update AWS Lambda env variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DB_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DB_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          else
            DB_USERNAME=${{ secrets.DEV_DATABASE_USERNAME }}
            DB_PASSWORD=${{ secrets.DEV_DATABASE_PASSWORD }}
          fi

          aws lambda update-function-configuration \
            --function-name lambdaSQLRoute \
            --environment "Variables={\
              DATABASE_HOST=${{ secrets.DATABASE_HOST }},\
              DATABASE_USERNAME=$DB_USERNAME,\
              DATABASE_PASSWORD=$DB_PASSWORD,\
              ABLY_KEY=${{ secrets.ABLY_KEY }},\
              SLACK_APP_ID=${{ secrets.SLACK_APP_ID }},\
              COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}\
            }"

      - name: Deploy to AWS Lambda
        run: |
          aws lambda update-function-code --function-name lambdaSQLRoute --zip-file fileb://APILambda/dist.zip
          while true; do
              update_status=$(aws lambda get-function --function-name lambdaSQLRoute | jq -r '.Configuration.LastUpdateStatus')

              if [[ "$update_status" == "Successful" ]]; then
                  echo "Update completed successfully."
                  break
              elif [[ "$update_status" == "Failed" ]]; then
                  echo "Update failed."
                  exit 1
              else
                  echo "Update in progress. Waiting..."
                  sleep 10
              fi
          done
          stageName="staging"
          aws apigateway put-rest-api --rest-api-id 623qsegfb9 --mode merge --parameters basepath=prepend --body fileb://APILambda/swagger.json
          aws apigateway create-deployment --rest-api-id 623qsegfb9 --stage-name $stageName --description 'Deployed'
        
      - name: Install dependencies
        run: |
          cd TiFBackendUtils
          npm ci
          cd ../APILambda
          npm ci

      - name: Authenticate with AWS Cognito and run tests
        run: |
          cd APILambda
          export NODE_OPTIONS="--max_old_space_size=4096"
          TEST_ENV=staging_tests npm run test:ci
  
  deploy:
    if: ${{ always() }}
    needs: staging_tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install backend utils dependencies
        run: |
          cd TiFBackendUtils
          npm ci
      
      - name: Build backend utils js
        run: |
          cd TiFBackendUtils
          npm run build
      
      - name: Remove backend utils dev dependencies
        run: |
          cd TiFBackendUtils
          npm ci --omit=dev
      
      - name: Package backend utils
        run: |
          cd TiFBackendUtils
          shopt -s extglob
          cp -R !(test|.github|dist|*.ts) dist/
          cd dist
          npm pack

      - name: Install dependencies
        run: |
          cd GeocodingLambda
          npm ci
          cd ../APILambda
          npm ci
          npm install ../TiFBackendUtils/dist/TiFBackendUtils-1.0.0.tgz

      - name: Build the project
        run: |
          cd APILambda
          npm run build
      
      - name: Remove dev dependencies
        run: |
          cd APILambda
          npm ci --omit=dev

      - name: Zip the project
        run: |
          cd APILambda
          shopt -s extglob
          cp -R !(test|.github|dist|*.ts) dist/
          cd dist
          zip -r ../dist.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update AWS Lambda env variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DB_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DB_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          else
            DB_USERNAME=${{ secrets.DEV_DATABASE_USERNAME }}
            DB_PASSWORD=${{ secrets.DEV_DATABASE_PASSWORD }}
          fi

          aws lambda update-function-configuration \
            --function-name lambdaSQLRoute \
            --environment "Variables={\
              DATABASE_HOST=${{ secrets.DATABASE_HOST }},\
              DATABASE_USERNAME=$DB_USERNAME,\
              DATABASE_PASSWORD=$DB_PASSWORD,\
              ABLY_KEY=${{ secrets.ABLY_KEY }},\
              SLACK_APP_ID=${{ secrets.SLACK_APP_ID }},\
              COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}\
            }"

      - name: Deploy to AWS Lambda
        run: |
          aws lambda update-function-code --function-name lambdaSQLRoute --zip-file fileb://APILambda/dist.zip
          while true; do
              update_status=$(aws lambda get-function --function-name lambdaSQLRoute | jq -r '.Configuration.LastUpdateStatus')

              if [[ "$update_status" == "Successful" ]]; then
                  echo "Update completed successfully."
                  break
              elif [[ "$update_status" == "Failed" ]]; then
                  echo "Update failed."
                  exit 1
              else
                  echo "Update in progress. Waiting..."
                  sleep 10
              fi
          done
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            stageName="prod"
            VERSION_NUMBER=$(aws lambda publish-version --function-name lambdaSQLRoute | jq -r '.Version')
            aws lambda update-alias --function-name lambdaSQLRoute --name prod --function-version $VERSION_NUMBER
            sed -i 's/:dev/:prod/g' APILambda/swagger.json
          else
            stageName="staging"
          fi
          aws apigateway put-rest-api --rest-api-id 623qsegfb9 --mode merge --parameters basepath=prepend --body fileb://APILambda/swagger.json
          aws apigateway create-deployment --rest-api-id 623qsegfb9 --stage-name $stageName --description 'Deployed'