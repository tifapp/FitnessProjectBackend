name: Test API

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - development

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: devTest
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -u root --password=password"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    env:
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: 3306
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: password
      DATABASE_NAME: devTest
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ABLY_KEY: ${{ secrets.ABLY_KEY }}
      COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
      AWS_LAMBDA_FUNCTION_NAME: lambdaSQLRoute

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Verify MySQL connection
        run: |
          mysql --host=127.0.0.1 --user=root --password=password -e "SHOW DATABASES;" 

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm ci
        env:
          CI: true
          
      - name: Initialize DB
        run: |
          npm run resetDB

      - name: Update entities
        run: |
          npm run dbtots
      
      - name: Validate openapi specs
        run: |
          cd APILambda
          npx lint-openapi specs.json

      - name: Run tests
        run: |
          cd APILambda
          export NODE_OPTIONS="--max_old_space_size=4096"
          npm run test:ci

  build:
    needs: test
    uses: ./.github/workflows/build_api.yml
    secrets: inherit
  
  deploy_for_staging_tests:
    concurrency: 
      group: stagingTest
      cancel-in-progress: false
    needs: build
    uses: ./.github/workflows/deploy_api.yml
    secrets: inherit
    with:
      stage: "stagingTest"
  
  test_on_staging:
    concurrency: 
      group: stagingTest
      cancel-in-progress: false
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: deploy_for_staging_tests
    
    env:
      CA_PEM: ${{ secrets.CA_PEM }}
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_NAME: stagingTest
      DATABASE_USERNAME: ${{ secrets.DEV_DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DEV_DATABASE_PASSWORD }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ABLY_KEY: ${{ secrets.ABLY_KEY }}
      AWS_LAMBDA_FUNCTION_NAME: lambdaSQLRoute
      COGNITO_CLIENT_APP_ID: ${{ secrets.COGNITO_CLIENT_APP_ID }}
      COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
      SLACK_APP_ID: ${{ secrets.SLACK_APP_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: '18'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Install dependencies
      run: |
        npm ci
      env:
        CI: true

    - name: Wait for AWS Deployment
      run: |
        sleep 20

    - name: Run staging tests with authenticated Cognito users
      # TODO: Reduce memory required
      # TODO: Allow "createUser" tests after we get company email so we can have unlimited test users
      run: |
        cd APILambda
        export NODE_OPTIONS="--max_old_space_size=4096"
        API_ENDPOINT=https://623qsegfb9.execute-api.us-west-2.amazonaws.com/stagingTest ENVIRONMENT=stagingTest npm run test:ci -- --testPathIgnorePatterns=createUserProfile\\.test\\.ts