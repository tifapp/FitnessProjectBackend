name: Build and Deploy Geocoding Pipeline to AWS Lambda

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string

jobs:
  build:
    uses: ./.github/workflows/build_geocoder.yml

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: geocoding-lambda
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update AWS Lambda env variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DB_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DB_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          else
            DB_USERNAME=${{ secrets.DEV_DATABASE_USERNAME }}
            DB_PASSWORD=${{ secrets.DEV_DATABASE_PASSWORD }}
          fi

          aws lambda update-function-configuration \
            --function-name geocodingPipeline \
            --environment "Variables={\
              DATABASE_HOST=${{ secrets.DATABASE_HOST }},\
              DATABASE_USERNAME=$DB_USERNAME,\
              DATABASE_PASSWORD=$DB_PASSWORD\
            }"

      - name: Deploy to AWS Lambda
        run: |
          aws lambda update-function-code --function-name geocodingPipeline --zip-file fileb://dist.zip
          while true; do
              update_status=$(aws lambda get-function --function-name geocodingPipeline | jq -r '.Configuration.LastUpdateStatus')

              if [[ "$update_status" == "Successful" ]]; then
                  echo "Update completed successfully."
                  break
              elif [[ "$update_status" == "Failed" ]]; then
                  echo "Update failed."
                  exit 1
              else
                  echo "Update in progress. Waiting..."
                  sleep 10
              fi
          done
          if [[ "${{ inputs.stage }}" == "prod" ]]; then
            VERSION_NUMBER=$(aws lambda publish-version --function-name geocodingPipeline | jq -r '.Version')
            aws lambda update-alias --function-name geocodingPipeline --name ${{ inputs.stage }} --function-version $VERSION_NUMBER
          elif [[ "${{ inputs.stage }}" == "staging" ]]; then
            VERSION_NUMBER=$(aws lambda publish-version --function-name geocodingPipeline | jq -r '.Version')
            aws lambda update-alias --function-name geocodingPipeline --name ${{ inputs.stage }} --function-version $VERSION_NUMBER
          fi
